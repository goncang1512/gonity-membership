// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  // output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id
  name          String
  email         String
  emailVerified Boolean
  image         String?
  createdAt     DateTime
  updatedAt     DateTime
  sessions      Session[]
  accounts      Account[]

  apikeys    Apikey[]
  permission Permission[]
  membership Membership[]

  @@unique([email])
  @@map("user")
  AuthorizeUri AuthorizeUri[]
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}

model Apikey {
  id                  String    @id
  name                String?
  start               String?
  prefix              String?
  key                 String  @unique
  userId              String
  user                User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  refillInterval      Int?
  refillAmount        Int?
  lastRefillAt        DateTime?
  enabled             Boolean?
  rateLimitEnabled    Boolean?
  rateLimitTimeWindow Int?
  rateLimitMax        Int?
  requestCount        Int?
  remaining           Int?
  lastRequest         DateTime?
  expiresAt           DateTime?
  createdAt           DateTime
  updatedAt           DateTime
  permissions         String?
  metadata            String?

  @@map("apikey")
}

model Permission {
  id          String  @id
  name        String
  description String?
  userId      String

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  membership Membership[]

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@map("permission")
}

enum StatusMembership {
  active
  inactive
  pending
}

model Membership {
  id          String           @id
  name        String
  description String?
  price       Int
  duration    Int
  badge       String
  status      StatusMembership
  userId      String

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  permissions Permission[]
  transaction Transaction[]
  subscribe Subscribe[]

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@map("membership")
}

model AuthorizeUri {
  id  String @id
  url String
  userId String

  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@map("authorize_uri")
}

enum TransactionEnum {
  succeeded
  failed
  pending
  refunded
  disputed

}

model Transaction {
  id String @id
  memberId  String
  customerEmail String
  customerName String
  tierId String
  amount Int
  status TransactionEnum
  method String
  paidAt DateTime?

  tier  Membership @relation(fields: [tierId], references: [id], onDelete: Cascade)

  createdAt DateTime  @default(now())
  updatedAt DateTime  @default(now()) @updatedAt

  @@map("transaction")
}

enum SubscriptionStatus {
  active
  expired
  canceled
  pending
}

model Subscribe {
  id              String @id
  name            String
  email           String
  memberId        String
  membershipId    String
  membership      Membership @relation(fields: [membershipId], references: [id], onDelete: Cascade)
  expiredAt       DateTime
  status          SubscriptionStatus

  createdAt DateTime  @default(now())
  updatedAt DateTime  @default(now()) @updatedAt

  @@map("subscribe")
}